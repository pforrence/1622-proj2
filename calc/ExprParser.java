
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 12 13:52:37 EDT 2018
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.*;
import java.lang.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 12 13:52:37 EDT 2018
  */
public class ExprParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ExprParser() {super();}

  /** Constructor which sets the default scanner. */
  public ExprParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExprParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\004\005\000\002\005\010\000\002\005\010\000" +
    "\002\005\011\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\002\uffff\013\005\001\002\000\004\002" +
    "\051\001\002\000\024\002\ufffd\004\015\005\016\006\020" +
    "\007\007\010\014\011\012\012\013\021\011\001\002\000" +
    "\024\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\021\ufffc\001\002\000\004\021\050\001" +
    "\002\000\004\002\001\001\002\000\004\016\046\001\002" +
    "\000\024\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\021\ufff5\001\002\000\004\020\043" +
    "\001\002\000\004\020\042\001\002\000\004\020\035\001" +
    "\002\000\004\020\030\001\002\000\024\002\ufffd\004\015" +
    "\005\016\006\020\007\007\010\014\011\012\012\013\021" +
    "\011\001\002\000\004\020\021\001\002\000\004\017\022" +
    "\001\002\000\004\022\023\001\002\000\004\015\024\001" +
    "\002\000\004\020\025\001\002\000\004\014\026\001\002" +
    "\000\024\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\021\ufff8\001\002\000\004\002\ufffe" +
    "\001\002\000\004\017\031\001\002\000\004\020\032\001" +
    "\002\000\004\017\033\001\002\000\004\022\034\001\002" +
    "\000\024\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\021\ufff9\001\002\000\004\017\036" +
    "\001\002\000\004\020\037\001\002\000\004\017\040\001" +
    "\002\000\004\020\041\001\002\000\024\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\021" +
    "\ufffa\001\002\000\024\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\021\ufff6\001\002\000" +
    "\004\017\044\001\002\000\004\020\045\001\002\000\024" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\021\ufff4\001\002\000\020\004\015\005\016" +
    "\006\020\007\007\010\014\011\012\012\013\001\002\000" +
    "\024\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\021\ufffb\001\002\000\024\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\021\ufff7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\007\004\016\005\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\026\004\016\005" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExprParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExprParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExprParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	return lexer.next_token(); 

    }

 

  ExprLex lexer;

  public ExprParser(ExprLex lex) {
      super(lex);
      lexer = lex;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ExprParser$actions {


  public static int size = 0;
  public static Hashtable<String, Integer> labelTable 
  = new Hashtable<String, Integer>();

  private final ExprParser parser;

  /** Constructor */
  CUP$ExprParser$actions(ExprParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ExprParser$do_action(
    int                        CUP$ExprParser$act_num,
    java_cup.runtime.lr_parser CUP$ExprParser$parser,
    java.util.Stack            CUP$ExprParser$stack,
    int                        CUP$ExprParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ExprParser$result;

      /* select the action based on the action number */
      switch (CUP$ExprParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= RAOP REG COMMA REG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new String(op+" " + rt+" "+rs); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= HOP 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new String((String)op); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= DOP REG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new String(op +" "+rs); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= JOP ID 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Object imm = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new String(op +" "+imm); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= IOPM REG COMMA INT LPAREN REG RPAREN 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-6)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-6)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).left;
		int immright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		 RESULT = new String(op +" "+rt+" "+ imm +" "+rs); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-6)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= IOP REG COMMA REG COMMA INT 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Integer imm = (Integer)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new String(op+" " + rt+" "+rs+" "+imm); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= ROP REG COMMA REG COMMA REG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).right;
		Object rd = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-4)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = new String(op+" " + rd+" "+rs+" "+rt); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-5)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // label_inst ::= ID COLON instruction 
            {
              Instruction RESULT =null;
		int immleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).left;
		int immright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).right;
		Object imm = (Object)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)).value;
		int resultleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		String result = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		System.out.println(imm + ": " + result);
                	labelTable.put(imm.toString(), size);
                  size++;
                 RESULT = new Instruction(result); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("label_inst",2, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // label_inst ::= instruction 
            {
              Instruction RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		String result = (String)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 size++; System.out.println(result); RESULT = new Instruction(result); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("label_inst",2, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction_list ::= 
            {
              ArrayList<Instruction> RESULT =null;
		 RESULT = new ArrayList<Instruction>(0); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction_list",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction_list ::= label_inst instruction_list 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		ArrayList<Instruction> il = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = il; il.add(i); 
			
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("instruction_list",1, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              ArrayList<Instruction> RESULT =null;
		 RESULT = new ArrayList<Instruction>(0); 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).right;
		ArrayList<Instruction> start_val = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)).value;
		RESULT = start_val;
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExprParser$parser.done_parsing();
          return CUP$ExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= DOT_TEXT instruction_list 
            {
              ArrayList<Instruction> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()).right;
		ArrayList<Instruction> p = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$ExprParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ExprParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ExprParser$stack.elementAt(CUP$ExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExprParser$stack.peek()), RESULT);
            }
          return CUP$ExprParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

